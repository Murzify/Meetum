import kotlin.Boolean;

CREATE TABLE records (
    record_id TEXT NOT NULL,
    client_name TEXT,
    description TEXT,
    phone TEXT,
    service_id TEXT NOT NULL,
    deleted INTEGER AS Boolean DEFAULT 0 NOT NULL,
    synced INTEGER AS Boolean DEFAULT 0 NOT NULL,
    PRIMARY KEY(record_id)
);

getAllRecords:
SELECT
    records.record_id,
    client_name,
    description,
    phone,
    services.service_id,
    name,
    price,
    currency,
    record_dates.date_id,
    date
FROM records
INNER JOIN services ON records.service_id = services.service_id
INNER JOIN record_dates ON records.record_id = record_dates.record_id AND record_dates.deleted = 0
WHERE records.deleted == 0;

getUnsynced:
SELECT
    records.record_id,
    client_name,
    description,
    phone,
    services.service_id,
    records.deleted,
    record_dates.date_id,
    date,
    record_dates.deleted
FROM records
INNER JOIN services ON records.service_id = services.service_id
INNER JOIN record_dates ON records.record_id = record_dates.record_id
WHERE records.synced = 0 OR records.record_id IN (
                                SELECT DISTINCT record_dates.record_id
                                FROM record_dates
                                WHERE synced = 0
                            );

getByDate:
SELECT
    records.record_id,
    client_name,
    description,
    phone,
    services.service_id,
    name,
    price,
    currency,
    record_dates.date_id,
    date
FROM records
INNER JOIN services ON records.service_id = services.service_id
INNER JOIN record_dates ON records.record_id = record_dates.record_id AND record_dates.deleted = 0
WHERE EXISTS (
    SELECT 1 FROM record_dates
    WHERE record_dates.record_id = records.record_id
    AND record_dates.date BETWEEN :startDate AND :endDate
) AND records.deleted = 0;

getFuture:
SELECT
    records.record_id,
    client_name,
    description,
    phone,
    services.service_id,
    name,
    price,
    currency,
    record_dates.date_id,
    date
FROM records
INNER JOIN services ON records.service_id = services.service_id
INNER JOIN record_dates ON records.record_id = record_dates.record_id
    AND record_dates.date > :currentTime AND record_dates.deleted = 0
WHERE records.service_id == :serviceId AND EXISTS
    (SELECT 1 FROM record_dates
        WHERE record_dates.record_id == records.record_id
        AND record_dates.date > :currentTime
    );

getForDeletion:
SELECT record_id FROM records WHERE deleted == 1 AND synced == 0;

add:
INSERT OR IGNORE INTO records
VALUES ?;

addOrReplace:
INSERT OR REPLACE INTO records
VALUES ?;

update:
UPDATE records
    SET client_name = ?,
        description = ?,
        phone = ?,
        service_id = ?,
        deleted = ?
WHERE ? = records.record_id;

delete:
DELETE FROM records WHERE :id = record_id;

markForDeleteion:
UPDATE records
    SET deleted = 1,
        synced = 0
WHERE :id == record_id;

deleteLinkedWithSerivce:
DELETE FROM records WHERE service_id == :serviceId;

markAsDeletedByService:
UPDATE records
    SET deleted = 1
WHERE service_id == :serviceId;